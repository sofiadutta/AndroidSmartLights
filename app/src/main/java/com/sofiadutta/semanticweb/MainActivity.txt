package edu.umbc.ebiquity.mithril.util.specialtasks.semanticweb;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Intent;
import android.os.Bundle;
import android.os.Debug;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.google.gson.Gson;

import edu.umbc.ebiquity.mithril.util.specialtasks.semanticweb.data.RandomGenerator;
import edu.umbc.ebiquity.mithril.util.specialtasks.semanticweb.data.UserContextInformation;
import edu.umbc.ebiquity.mithril.util.specialtasks.semanticweb.data.UserContextInformationForActivities;

public class MainActivity extends Activity {
	/**
	 * This public static variable is being used to share data between
	 * activities but this a bad design. Should change in the future if
	 * possible.
	 */
	public static UserContextInformationForActivities userContextInformationForActivities;

	private SemanticManagement semanticManagementInstance;

	// Debugging
	private static final String TAG = "ContextMatters";
	private static final boolean D = true;

	// Message types sent from the BluetoothChatService Handler
	public static final int MESSAGE_STATE_CHANGE = 1;
	public static final int MESSAGE_READ = 2;
	public static final int MESSAGE_WRITE = 3;
	public static final int MESSAGE_DEVICE_NAME = 4;
	public static final int MESSAGE_TOAST = 5;

	// Key names received from the BluetoothChatService Handler
	public static final String DEVICE_NAME = "device_name";
	public static final String TOAST = "toast";

	// Intent request codes
	private static final int REQUEST_CONNECT_DEVICE_SECURE = 1;
	private static final int REQUEST_CONNECT_DEVICE_INSECURE = 2;
	private static final int REQUEST_ENABLE_BT = 3;

	// Layout Views
	// private ListView mConversationView;
	// private EditText mOutEditText;
	@SuppressWarnings("unused")
	private Button mSendButton;

	// Name of the connected device
	private String mConnectedDeviceName = null;
	// Array adapter for the conversation thread
	// private ArrayAdapter<String> mConversationArrayAdapter;
	// String buffer for outgoing messages
	private StringBuffer mOutStringBuffer;
	// Local Bluetooth adapter
	private BluetoothAdapter mBluetoothAdapter = null;
	// Member object for the chat services
	private BluetoothChatService mChatService = null;

	public MainActivity me = this;

	public String jsonreceived = "";

	public long startTime;
	public long finishTime;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		userContextInformationForActivities = new UserContextInformationForActivities();
		semanticManagementInstance = new SemanticManagement(this);

		setContentView(R.layout.activity_main);

		// Get local Bluetooth adapter
		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

		// If the adapter is null, then Bluetooth is not supported
		if (mBluetoothAdapter == null) {
			Toast.makeText(this, "Bluetooth is not available",
					Toast.LENGTH_LONG).show();
			finish();
			return;
		}

		Button identity = (Button) findViewById(R.id.identity);
		identity.setOnClickListener(new View.OnClickListener() {
			public void onClick(View view) {
				Intent myIntent = new Intent(view.getContext(),
						IdentityActivity.class);
				startActivity(myIntent);
			}
		});

		Button activity = (Button) findViewById(R.id.activity);
		activity.setOnClickListener(new View.OnClickListener() {
			public void onClick(View view) {
				Intent myIntent = new Intent(view.getContext(),
						ActivityActivity.class);
				startActivity(myIntent);
			}
		});

		Button location = (Button) findViewById(R.id.location);
		location.setOnClickListener(new View.OnClickListener() {
			public void onClick(View view) {
				Intent myIntent = new Intent(view.getContext(),
						LocationActivity.class);
				startActivity(myIntent);
			}
		});

		Button updateContext = (Button) findViewById(R.id.update_context);
		updateContext.setOnClickListener(new View.OnClickListener() {
			public void onClick(View view) {
				final Intent resultDisplayIntent = new Intent(
						MainActivity.this, EnrichedContextActivity.class);

				// UserContextInformation info = new UserContextInformation();
				if (userContextInformationForActivities.getIdentity() == null) {
					Toast.makeText(getApplicationContext(),
							"You need to select an ID, please!",
							Toast.LENGTH_LONG).show();
				} else {

					// getting other contexts
					sendMessage("givemecontext");

					// I will wait 5 seconds
					int users=512;
					jsonreceived=RandomGenerator.generateJson(users-1);

					Log.i("datos", "---START---");
					Handler handler = new Handler();
					handler.postDelayed(new Runnable() {
						public void run() {
							startTime = System.nanoTime();
							UserContextInformation newInfo = semanticManagementInstance
									.enrichContext(getUserContext(),
											jsonreceived);

							Toast.makeText(getApplicationContext(),
									newInfo.toString(), Toast.LENGTH_LONG)
									.show();
							resultDisplayIntent
									.putExtra("Identity", newInfo.id);
							resultDisplayIntent.putExtra("Activity",
									newInfo.activity);
							resultDisplayIntent.putExtra("Location",
									newInfo.location);
							finishTime = System.nanoTime();
							double time = (finishTime - startTime) / 1e9;
							Log.i("datos", "... has runned for " + time
									+ " seconds");
							Toast.makeText(me, "TIME: " + time,
									Toast.LENGTH_LONG).show();
							printMemoryUsage();
							startActivity(resultDisplayIntent);
						}
					}, 2000);

				}
			}
		});
	}

	public static void printMemoryUsage() {
		Debug.MemoryInfo memoryInfo = new Debug.MemoryInfo();
		Debug.getMemoryInfo(memoryInfo);

		String memMessage = String.format(
				"Memory: Private=%.2f MB, Pss=%.2f MB, Shared=%.2f MB",
				memoryInfo.getTotalPrivateDirty() / 1024.0,
				memoryInfo.getTotalPss() / 1024.0,
				memoryInfo.getTotalSharedDirty() / 1024.0);

		Log.i("datos", memMessage);
	}

	public UserContextInformation getUserContext() {

		UserContextInformation info = new UserContextInformation();

		info.id = userContextInformationForActivities.getIdentity();
		info.activity = userContextInformationForActivities.getActivity();
		info.location = userContextInformationForActivities.getLocation();
		info.sfActivity = userContextInformationForActivities
				.getListOfSupportingFactsActivity();
		info.sfLocation = userContextInformationForActivities
				.getListOfSupportingFactsLocation();

		return info;
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.option_menu, menu);
		return true;
	}

	@Override
	public void onStart() {
		super.onStart();
		if (D)
			Log.e(TAG, "++ ON START ++");

		// If BT is not on, request that it be enabled.
		// setupChat() will then be called during onActivityResult
		if (!mBluetoothAdapter.isEnabled()) {
			Intent enableIntent = new Intent(
					BluetoothAdapter.ACTION_REQUEST_ENABLE);
			startActivityForResult(enableIntent, REQUEST_ENABLE_BT);
			// Otherwise, setup the chat session
		} else {
			if (mChatService == null)
				setupBT();
		}
	}

	@Override
	public synchronized void onResume() {
		super.onResume();
		if (D)
			Log.e(TAG, "+ ON RESUME +");

		// Performing this check in onResume() covers the case in which BT was
		// not enabled during onStart(), so we were paused to enable it...
		// onResume() will be called when ACTION_REQUEST_ENABLE activity
		// returns.
		if (mChatService != null) {
			// Only if the state is STATE_NONE, do we know that we haven't
			// started already
			if (mChatService.getState() == BluetoothChatService.STATE_NONE) {
				// Start the Bluetooth chat services
				mChatService.start();
			}
		}
	}

	public void setupBT() {
		// Initialize the BluetoothChatService to perform bluetooth connections
		mChatService = new BluetoothChatService(this, mHandler);

		// Initialize the buffer for outgoing messages
		mOutStringBuffer = new StringBuffer("");
	}

	@Override
	public synchronized void onPause() {
		super.onPause();
		if (D)
			Log.e(TAG, "- ON PAUSE -");
	}

	@Override
	public void onStop() {
		super.onStop();
		if (D)
			Log.e(TAG, "-- ON STOP --");
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		// Stop the Bluetooth chat services
		if (mChatService != null)
			mChatService.stop();
		if (D)
			Log.e(TAG, "--- ON DESTROY ---");
	}

	private void ensureDiscoverable() {
		if (D)
			Log.d(TAG, "ensure discoverable");
		if (mBluetoothAdapter.getScanMode() != BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {
			Intent discoverableIntent = new Intent(
					BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
			discoverableIntent.putExtra(
					BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300);
			startActivity(discoverableIntent);
		}
	}

	/**
	 * Sends a message.
	 * 
	 * @param message
	 *            A string of text to send.
	 */
	public void sendMessage(String message) {
		// Check that we're actually connected before trying anything
		if (mChatService.getState() != BluetoothChatService.STATE_CONNECTED) {
			Toast.makeText(this, R.string.not_connected, Toast.LENGTH_SHORT)
					.show();
			return;
		}

		// Check that there's actually something to send
		if (message.length() > 0) {
			// Get the message bytes and tell the BluetoothChatService to write
			byte[] send = message.getBytes();
			mChatService.write(send);

			// Reset out string buffer to zero and clear the edit text field
			mOutStringBuffer.setLength(0);
			// mOutEditText.setText(mOutStringBuffer);
		}
	}

	private final void setStatus(int resId) {
		final ActionBar actionBar = getActionBar();
		actionBar.setSubtitle(resId);
	}

	private final void setStatus(CharSequence subTitle) {
		final ActionBar actionBar = getActionBar();
		actionBar.setSubtitle(subTitle);
	}

	// The Handler that gets information back from the BluetoothChatService
	@SuppressLint("HandlerLeak")
	private final Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case MESSAGE_STATE_CHANGE:
				if (D)
					Log.i(TAG, "MESSAGE_STATE_CHANGE: " + msg.arg1);
				switch (msg.arg1) {
				case BluetoothChatService.STATE_CONNECTED:
					setStatus(getString(R.string.title_connected_to,
							mConnectedDeviceName));
					// mConversationArrayAdapter.clear();
					break;
				case BluetoothChatService.STATE_CONNECTING:
					setStatus(R.string.title_connecting);
					break;
				case BluetoothChatService.STATE_LISTEN:
				case BluetoothChatService.STATE_NONE:
					setStatus(R.string.title_not_connected);
					break;
				}
				break;
			case MESSAGE_WRITE:
				byte[] writeBuf = (byte[]) msg.obj;
				// construct a string from the buffer
				String writeMessage = new String(writeBuf);
				Toast.makeText(getApplicationContext(), "Me:  " + writeMessage,
						Toast.LENGTH_SHORT).show();
				// mConversationArrayAdapter.add("Me:  " + writeMessage);
				break;
			case MESSAGE_READ:
				byte[] readBuf = (byte[]) msg.obj;
				// construct a string from the valid bytes in the buffer
				String readMessage = new String(readBuf, 0, msg.arg1);
				if (readMessage.equalsIgnoreCase("givemecontext")) {
					// someone wants our context
					UserContextInformation info = getUserContext();
					FactCollection fc = info.toFacts();
					Gson gson = new Gson();

					String jsonGenerated = gson.toJson(fc);
					Log.i(SemanticManagement.TAG, "-*-*-*-JSON Generated:\n"
							+ jsonGenerated);

					me.sendMessage(jsonGenerated);
				} else if (readMessage.startsWith("")) {
					// I can only handle one connection
					jsonreceived = readMessage;
				}

				Toast.makeText(getApplicationContext(),
						mConnectedDeviceName + ":  " + readMessage,
						Toast.LENGTH_SHORT).show();
				// mConversationArrayAdapter.add(mConnectedDeviceName+":  " +
				// readMessage);
				break;
			case MESSAGE_DEVICE_NAME:
				// save the connected device's name
				mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);
				Toast.makeText(getApplicationContext(),
						"Connected to " + mConnectedDeviceName,
						Toast.LENGTH_SHORT).show();
				break;
			case MESSAGE_TOAST:
				Toast.makeText(getApplicationContext(),
						msg.getData().getString(TOAST), Toast.LENGTH_SHORT)
						.show();
				break;
			}
		}
	};

	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (D)
			Log.d(TAG, "onActivityResult " + resultCode);
		switch (requestCode) {
		case REQUEST_CONNECT_DEVICE_SECURE:
			// When DeviceListActivity returns with a device to connect
			if (resultCode == Activity.RESULT_OK) {
				connectDevice(data, true);
			}
			break;
		case REQUEST_CONNECT_DEVICE_INSECURE:
			// When DeviceListActivity returns with a device to connect
			if (resultCode == Activity.RESULT_OK) {
				connectDevice(data, false);
			}
			break;
		case REQUEST_ENABLE_BT:
			// When the request to enable Bluetooth returns
			if (resultCode == Activity.RESULT_OK) {
				// Bluetooth is now enabled, so set up a chat session
				setupBT();
			} else {
				// User did not enable Bluetooth or an error occurred
				Log.d(TAG, "BT not enabled");
				Toast.makeText(this, R.string.bt_not_enabled_leaving,
						Toast.LENGTH_SHORT).show();
				finish();
			}
		}
	}

	private void connectDevice(Intent data, boolean secure) {
		// Get the device MAC address
		String address = data.getExtras().getString(
				DeviceListActivity.EXTRA_DEVICE_ADDRESS);
		// Get the BluetoothDevice object
		BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);
		// Attempt to connect to the device
		mChatService.connect(device);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		Intent serverIntent = null;
		switch (item.getItemId()) {
		case R.id.secure_connect_scan:
			// Launch the DeviceListActivity to see devices and do scan
			serverIntent = new Intent(this, DeviceListActivity.class);
			startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE_SECURE);
			return true;
		case R.id.insecure_connect_scan:
			// Launch the DeviceListActivity to see devices and do scan
			serverIntent = new Intent(this, DeviceListActivity.class);
			startActivityForResult(serverIntent,
					REQUEST_CONNECT_DEVICE_INSECURE);
			return true;
		case R.id.discoverable:
			// Ensure this device is discoverable by others
			ensureDiscoverable();
			return true;
		}
		return false;
	}

}